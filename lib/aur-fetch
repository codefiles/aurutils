#!/bin/bash
# aur-fetch - retrieve build files from the AUR
[[ -v AUR_DEBUG ]] && set -o xtrace
shopt -s extglob
argv0=fetch
AUR_LOCATION=${AUR_LOCATION:-https://aur.archlinux.org}
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[1]}(): }'

# Author information for merge commits
export GIT_AUTHOR_NAME=aurutils
export GIT_AUTHOR_EMAIL=aurutils@localhost
export GIT_COMMITTER_NAME=aurutils
export GIT_COMMITTER_EMAIL=aurutils@localhost

# Placeholder for repositories without commits
git_empty_object=$(git hash-object -t tree /dev/null)

# default options
existing=0 recurse=0 discard=0 sync=fetch

results() {
    local mode=$1 prev=$2 current=$3 path=$4 dest=$5

    if [[ -w $dest ]]; then
        printf >> "$dest" '%s:%s:%s:file://%s\n' "$mode" "$prev" "$current" "$path"
    fi
}

sync_package_config() {
    local sync=$1 pkg=$2

    if [[ $sync == 'auto' ]] && [[ $(git config --get --type bool aurutils.rebase) == 'true' ]]; then
        printf >&2 '%s: aurutils.rebase is set for %s\n' "$argv0" "$pkg"
        printf '%s' rebase

    elif [[ $sync == 'auto' ]]; then
        printf '%s' merge
    else
        printf '%s' "$sync"
    fi
}

usage() {
    cat <<! | base64 -d
ICAgICAgICAgICAgIC4tLX5+LF9fCjotLi4uLiwtLS0tLS0tYH5+Jy5fLicKIGAtLCwsICAs
XyAgICAgIDsnflUnCiAgXywtJyAsJ2AtX187ICctLS4KIChfLyd+fiAgICAgICcnJycoOwoK
!
    printf >&2 'usage: %s [-Sefr] [--rebase|--reset|--merge] [--] pkgname...\n' "$argv0"
    exit 1
}

# option handling
source /usr/share/makepkg/util/parseopts.sh

opt_short='efrS'
opt_long=('auto' 'merge' 'reset' 'rebase' 'discard' 'existing' 'results:' 'ff'
          'ff-only' 'no-ff' 'no-commit' 'recurse')
opt_hidden=('dump-options' 'sync:')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset rebase_args merge_args results_file
while true; do
    case "$1" in
        # aur-fetch options
        -S|--auto)
            sync=auto ;;
        -f|--discard)
            discard=1 ;;
        -e|--existing)
            existing=1 ;;
        --merge)
            sync=merge ;;
        --rebase)
            sync=rebase ;;
        --reset)
            sync=reset ;;
        --results)
            shift; results_file=$(realpath -- "$1") ;;
        # git options
        --ff)
            merge_args+=(-ff) ;;
        --ff-only)
            merge_args+=(--ff-only) ;;
        --no-commit)
            merge_args+=(--no-commit) ;;
        --no-ff)
            merge_args+=(--no-ff); rebase_args+=(--no-ff) ;;
        # Compatibility options
        --sync)
            shift; sync=$1 ;;
        -r|--recurse)
            recurse=1 ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}" ${AUR_DEBUG+"${opt_hidden[@]}"}
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

# option validation
if [[ $sync == !(auto|merge|rebase|reset|fetch) ]]; then
    printf >&2 '%s: invalid --sync mode\n' "$argv0"
    exit 1
fi

if (( ! $# )); then
    printf >&2 '%s: no arguments given\n' "$argv0"
    exit 1
fi

if [[ -v results_file ]]; then
    : >"$results_file" || exit 1 # truncate file
fi

# Default to only allowing fast-forward merges (as git-pull)
if (( ! ${#merge_args[@]} )); then
    merge_args=(--ff-only)
fi

# Main loop
if (( recurse )); then
    aur depends --pkgbase "$@" # stdin handled by aur-depends
elif (( $# == 1 )) && [[ $1 == "-" || $1 == "/dev/stdin" ]]; then
    tee # noop
else
    printf '%s\n' "$@"
fi | while read -r pkg; do
    unset -f git

    # Verify if the repository is hosted on AUR (#959)
    if (( existing )) && ! git ls-remote --exit-code "$AUR_LOCATION/$pkg" >/dev/null; then
        printf >&2 '%s: warning: package %s is not in AUR, skipping\n' "$argv0" "$pkg"
        continue

    elif [[ -d $pkg/.git ]]; then
        # Avoid issues with filesystem boundaries (#274)
        git() { command git -C "$pkg" "$@"; }

        # Retrieve new upstream commits
        git fetch -v origin >&2 || exit

        # Store original HEAD for --results output
        orig_head=$(git rev-parse --verify --quiet HEAD)
        orig_head=${orig_head:-$git_empty_object}

        # Retrieve per-package configuration (defaults to global setting, #1007)
        sync_pkg=$(sync_package_config "$sync" "$pkg")

        # Reset working tree if new commits will be merged (--discard)
        reset_on_update() {
            git merge-base --is-ancestor "$1" HEAD || git checkout ./
        }

        # Merge in new history
        case $sync_pkg in
            rebase|merge)
                (( discard )) && reset_on_update 'master@{u}'
                ;;&  # proceed to merge or rebase
            rebase)
                dest='HEAD'
                git rebase -v "${rebase_args[@]}" origin master ;;
            merge)
                dest='HEAD'
                git merge -v "${merge_args[@]}" origin master ;;
            reset)
                dest='master@{u}'
                git reset --hard 'master@{u}' ;;
            fetch)
                # Preserve local branch
                dest='master@{u}' ;;
        esac >&2 || {
            printf >&2 '%s: failed to %s %s\n' "$argv0" "$sync_pkg" "$pkg"
            exit 1
        }
        head=$(git rev-parse --verify "$dest")

        if [[ -v results_file ]]; then
            results "$sync_pkg" "$orig_head" "$head" "$PWD/$pkg" "$results_file"
        fi

    # Otherwise, try to clone anew
    elif git clone "$AUR_LOCATION/$pkg" >&2; then
        if head=$(git -C "$pkg" rev-parse --verify --quiet HEAD); then
            git -C "$pkg" --no-pager log --pretty=reference -1 >&2
        fi
        head=${head:-$git_empty_object}

        if [[ -v results_file ]]; then
            results 'clone' "$git_empty_object" "$head" "$PWD/$pkg" "$results_file"
        fi
    else
        printf >&2 '%s: failed to clone repository %s\n' "$argv0" "$pkg"
        exit 1
    fi
done

# vim: set et sw=4 sts=4 ft=sh:
