#!/bin/bash
# aur-fetch - retrieve build files from the AUR
[[ -v AUR_DEBUG ]] && set -o xtrace
argv0=fetch
AUR_LOCATION=${AUR_LOCATION:-https://aur.archlinux.org}
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[1]}(): }'

# default options
existing=0 recurse=0 sync=no

results() {
    local mode=$1 prev=$2 current=$3 path=$4 dest=$5

    if [[ -w $dest ]]; then
        printf >> "$dest" '%s:%s:%s:file://%s\n' "$mode" "$prev" "$current" "$path"
    fi
}

sync_get_type() {
    local sync=no key=$1 pkg=$2 head=$3

    if [[ $(git config --get --type bool "$key") == 'true' ]]; then
        plain >&2 'aurutils.rebase is set for %s' "$pkg"

        if ! git merge-base --is-ancestor 'HEAD@{upstream}' HEAD; then
            sync=rebase
        fi

    elif [[ $head != $(git rev-parse --verify 'HEAD@{upstream}') ]]; then
        sync=reset
    fi

    printf '%s' "$sync"
}

sync_merge_revisions() {
    local sync=$1

    if [[ $sync == 'rebase' ]]; then
        if [[ $(git config --get --type bool rebase.autoStash) != 'true' ]]; then
            git reset --hard 'HEAD'
        fi
        git rebase --verbose

    elif [[ $sync == 'reset' ]]; then
        git reset --hard 'HEAD@{upstream}'
    fi
}

usage() {
    cat <<! | base64 -d
ICAgICAgICAgICAgIC4tLX5+LF9fCjotLi4uLiwtLS0tLS0tYH5+Jy5fLicKIGAtLCwsICAs
XyAgICAgIDsnflUnCiAgXywtJyAsJ2AtX187ICctLS4KIChfLyd+fiAgICAgICcnJycoOwoK
!
    plain >&2 'usage: %s [-S] [--] pkgname...' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ ! -v NO_COLOR ]] && [[ ! -v AUR_DEBUG ]]; then
    [[ -t 2 ]] && colorize
fi

opt_short='rS'
opt_long=('sync:' 'results:' 'existing' 'recurse')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset results_file
while true; do
    case "$1" in
        --existing)
            existing=1 ;;
        -S)
            sync=auto ;;
        --sync)
            shift
            case $1 in
                auto|reset|rebase|no)
                    sync=$1 ;;
                *)
                    error '%s: invalid --sync option: %s' "$argv0" "$1"
                    usage ;;
            esac ;;
        --results)
            shift; results_file=$1 ;;
        ## deprecated options
        --recurse|-r)
            recurse=1 ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}" ${AUR_DEBUG+"${opt_hidden[@]}"}
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

# Single hyphen to denote input taken from stdin
stdin=0
if (( $# == 1 )) && [[ $1 == "-" || $1 == "/dev/stdin" ]]; then
    stdin=1
fi

if (( ! $# )); then
    error '%s: no pkgname given' "$argv0"
    exit 1
fi

if [[ -v results_file ]]; then
    results_file=$(realpath -- "$results_file")
    : >"$results_file" || exit 1 # truncate file
fi

if (( recurse )); then
    aur depends --pkgbase "$@" # stdin handled by aur-depends
elif (( stdin )); then
    tee # noop
else
    printf '%s\n' "$@"
fi | while read -r pkg; do
    unset -f git

    if [[ -d $pkg/.git ]]; then
        # Avoid issues with filesystem boundaries (#274)
        git() { command git -C "$pkg" "$@"; }

        # Retrieve new upstream revisions. In this step, no commits are merged
        # to the index and working tree.
        if git fetch --verbose >&2; then
            fetch_head=$(git rev-parse --verify FETCH_HEAD)
            prev_head=$(git rev-parse --verify HEAD)

            if [[ -v results_file ]]; then
                results 'fetch' "${prev_head:-0}" "$fetch_head" "$PWD/$pkg" "$results_file"
            fi
        else
            error '%s: %s: failed to %s repository' "$argv0" "$pkg" fetch
            exit 1
        fi

        if [[ $sync == 'auto' ]]; then
            # sync = rebase, reset or no
            sync=$(sync_get_type aurutils.rebase "$pkg" "$prev_head")
        fi

        # Merge revisions in the master branch with upstream.
        if sync_merge_revisions "$sync" >&2; then
            head=$(git rev-parse --verify HEAD)

            if [[ -v results_file ]] && [[ $sync != 'no' ]]; then
                results "$sync" "$prev_head" "$head" "$PWD/$pkg" "$results_file"
            fi
        else
            error '%s: %s: failed to %s repository' "$argv0" "$pkg" "$sync"
            exit 1
        fi

    # Otherwise, try to clone anew
    elif (( existing )) && ! git ls-remote --exit-code "$AUR_LOCATION/$pkg" >/dev/null; then
        warning '%s: package is not in AUR, skipping' "$argv0" "$pkg"
        continue

    elif git clone "$AUR_LOCATION/$pkg"; then
        # Verify if the repository is empty (#959)
        if head=$(git -C "$pkg" rev-parse --verify --quiet HEAD); then
            git -C "$pkg" --no-pager log --pretty=reference -1 >&2
        fi

        if [[ -v results_file ]]; then
            results 'clone' '0' "${head:-0}" "$PWD/$pkg" "$results_file"
        fi
    else
        error '%s: %s: failed to clone repository' "$argv0" "$pkg"
        exit 1
    fi
done

# vim: set et sw=4 sts=4 ft=sh:
