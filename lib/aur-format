#!/usr/bin/env perl
use strict;
use warnings;
use open ":std", ":encoding(UTF-8)";
use v5.20;
my $argv0 = 'format';
my $aur_json;

# Fallback to slower perl-based JSON parsing
if (eval { require JSON::XS; 1 }) {
    $aur_json = JSON::XS->new;
} else {
    require JSON::PP;
    $aur_json = JSON::PP->new;
}

# Dictionary for formatter string - subset of package-query(1) format options
# Save type of attribute (AUR, pacman or both) for --dump-format
my %aur_formats = (
    'a' => ['common',  'Arch'          ],
    'b' => ['common',  'PackageBase'   ],
    'c' => ['common',  'CheckDepends'  ],
    'C' => ['common',  'Conflicts'     ],
    'd' => ['common',  'Description'   ],
    'D' => ['common',  'Depends'       ],
    'e' => ['common',  'License'       ],
    'g' => ['common',  'Groups'        ],
    'M' => ['common',  'MakeDepends'   ],
    'n' => ['common',  'Name'          ],
    'O' => ['common',  'OptDepends'    ],
    'P' => ['common',  'Provides'      ],
    'U' => ['common',  'URL'           ],
    'v' => ['common',  'Version'       ],
    'f' => ['pacman',  'FileName'      ],
    'F' => ['pacman',  'Files'         ],
    'r' => ['pacman',  'Database'      ],
    'K' => ['aur'   ,  'Keywords'      ],
    'L' => ['aur'   ,  'LastModified'  ],
    'm' => ['aur'   ,  'Maintainer'    ],
    'o' => ['aur'   ,  'OutOfDate'     ],
    'p' => ['aur'   ,  'Popularity'    ],
    'S' => ['aur'   ,  'FirstSubmitted'],
    'w' => ['aur'   ,  'NumVotes'      ],
    'Q' => ['format',  'QueryID'       ]
);

# Keys used for sorting of numeric values (I integer, E epoch)
my %aur_numeric = (
    'FirstSubmitted' => 'E', 'LastModified' => 'E', 'NumVotes' => 'I', 'ID' => 'I',
    'PackageBaseID'  => 'I', 'Popularity'   => 'I'
);

sub tokenize {
    my ($format, $delim) = @_;

    if (!length($format)) {
        say STDERR "$argv0: empty format specified";
        exit(1);
    }
    # omit trailing empty fields
    my @tokens = split('%', $format);

    # ignore first field: split("%a%b") -> ("", 'a', 'b')
    my @labels = ("");
    my @suffix = ($tokens[0]);

    for my $i (1..$#tokens) {
        my $token = $tokens[$i];

        if (length($token)) {
            # Expand first character, preserve the rest
            my $token_1 = substr($token, 0, 1);
            my $label = $aur_formats{$token_1}->[1] // "";
            my $rest;

            if (not length($label) and (length($tokens[$i-1]) > 0 or $i == 1)) {
                die $argv0 . ': invalid format key specified';
            } elsif (not length($label)) {
                $rest = $token; # Special case for %%
            } else {
                $rest = substr($token, 1);
            }
            # Unescape shell-quoted strings, e.g. --format '%n\t%v\n'
            $rest =~ s/(?<!\\)\\t/\t/g; # do not unescape '\\t'
            $rest =~ s/(?<!\\)\\n/\n/g;
            $rest =~ s/(?<!\\)\\0/\0/g;

            push(@labels, $label);
            push(@suffix, $rest);
        } else {
            push(@labels, "");
            push(@suffix, "%");
        }
    }
    return \@labels, \@suffix;
}

sub info_expand_field {
    my ($value, $label, $delim) = @_;

    if (not defined($value)) {
        return "";
    } elsif (ref($value) eq 'ARRAY') {
        return join($delim, @{$value});
    } elsif (defined $aur_numeric{$label} and $aur_numeric{$label} eq 'E') {
        return gmtime($value);
    } else {
        return $value;
    }
}

# Expand tokens to AUR data
sub info_format {
    my ($pkg, $labels, $rest, $delim, $verbose) = @_;

    if (ref($pkg) ne 'HASH') {
        say STDERR "$argv0: --format requires dictionary input";
        exit(4);
    }

    my @fmt;
    for my $i (0..$#{$labels}) {
        my ($label, $suffix) = ($labels->[$i], $rest->[$i]);

        if (length($label)) {
            my $field = info_expand_field($pkg->{$label}, $label, $delim);

            if (not length($field) and $verbose) {
                $field = "-";
            }
            push(@fmt, $field . $suffix);
        } else {
            push(@fmt, $suffix);
        }
    }
    my $fmt_string = join('', @fmt);
    print($fmt_string);
}

sub info_list {
    my ($pkg, $delim) = @_;

    if (ref($pkg) ne 'HASH') {
        say STDERR "$argv0: --list requires dictionary input";
        exit(4);
    }
    say join($delim, $pkg->{'Name'}, $pkg->{'Version'});
}

# TODO: generalize --format with 1 line per array entry (--format-tsv)
sub info_table {
    my ($pkg, $delim, @kinds) = @_;

    if (ref($pkg) ne 'HASH') {
        say STDERR "$argv0: --table requires dictionary input";
        exit(4);
    }
    my $name = $pkg->{'Name'};
    my $base = $pkg->{'PackageBase'};
    my $pver = $pkg->{'Version'};

    # Print header (package without dependencies)
    say join($delim, $name, $name, $base, $pver, 'Self');

    for my $kind (@kinds) {
        if (ref($pkg->{$kind}) ne 'ARRAY') {
            next; # no dependencies of this kind
        }
        for my $depend (@{$pkg->{$kind}}) {
            say join($delim, $name, $depend, $base, $pver, $kind);
        }
    }
}

sub parse_json_line {
    my ($row, $id) = @_;

    my $obj = $aur_json->incr_parse($row)
        or die $argv0 . ": expected JSON object or array at beginning of string";
    $aur_json->incr_reset();

    # Support both AUR metadata dumps (arrays) and REST output ('results' dictionary)
    if (ref($obj) eq 'ARRAY') {
        return $obj;
    }
    elsif (ref($obj) eq 'HASH') {
        my $rref  = $obj->{'results'};
        my $error = $obj->{'error'};

        if (not defined($rref)) {
            say STDERR $argv0 . ': .results[] missing';
            exit(4);
        } elsif (defined($error)) {
            say STDERR $argv0 . ': response error (' . $error . ')';
            exit(4);
        }
        map { $_->{'QueryID'} = $id } @$rref;
        return $rref;
    }
    else {
        say STDERR $argv0 . ": not an array or hash";
        exit(4);
    }
}

# Process a nested array of hashes (sorting, reversal, set union and intersection)
sub results_merge {
    my ($results, $union_key, $isect_key) = @_;

    if (length($union_key)) {
        # Set union by value of specified key
        my %seen;
        @{$results} = map { grep(!$seen{$_->{$union_key}}++, @$_) } @{$results};
    }
    elsif (length($isect_key) and scalar @{$results} > 0) {
        # Set intersection by value of specified key
        my @isect = @{$results->[0]};

        for my $i (1..$#{$results}) {
            my %seen = map { $_->{$isect_key} => 1 } @{$results->[$i]}; 
            @isect = grep($seen{$_->{$isect_key}}, @isect);
        }
        @{$results} = @isect;
    } else {
        @{$results} = map { @$_ } @{$results};
    }
    return $results;
}

# Sorting and reversal on a flattened array (results_merge)
sub results_rsort {
    my ($results, $sort_key, $reversed) = @_;

    # Sort entries by value of specified key
    if (length($sort_key) and defined $aur_numeric{$sort_key}) {
        @{$results} = sort { $a->{$sort_key} <=> $b->{$sort_key} } @{$results};
    }
    elsif (length($sort_key)) {
        @{$results} = sort { $a->{$sort_key} cmp $b->{$sort_key} } @{$results};
    }
    if ($reversed // 0) {
        @{$results} = reverse @{$results};
    }
    return $results;
}

# https://www.drdobbs.com/scripts-as-modules/184416165
unless (caller) {
    # option handling
    use Getopt::Long;
    my $opt_mode;
    my $opt_delim; # delimiter for arrays
    my $opt_verbose = 0;  # inserts "-" for empty fields with --format
    my $opt_format;
    my $opt_table_keys = "";
    my $opt_sort_key = "";
    my $opt_union_key = "";
    my $opt_isect_key = "";
    my $opt_reverse = 0;
    my $opt_dump_fmt;

    GetOptions(
        'c|counts'      => sub { $opt_mode = 'counts' },
        'f|format=s'    => sub { $opt_mode = 'format', $opt_format = $_[1] },
        'l|list'        => sub { $opt_mode = 'list' },
        't|table'       => sub { $opt_mode = 'table' },
        'J|json'        => sub { $opt_mode = 'json' },
        'd|delim=s'     => \$opt_delim,
        'v|verbose'     => \$opt_verbose,
        'k|sort=s'      => \$opt_sort_key,
        'union=s'       => \$opt_union_key,
        'isect=s'       => \$opt_isect_key,
        'table-keys=s'  => \$opt_table_keys,
        'r|reverse'     => \$opt_reverse,
        'dump-format=s' => \$opt_dump_fmt
    ) or exit(1);

    # Print possible format options of a given type (tab-completion)
    if (length($opt_dump_fmt)) {
        if ($opt_dump_fmt !~ /^(any|pacman|common|aur|format)$/) {
            say STDERR "$argv0: invalid --dump-format option";
            exit(1);
        }
        my %formats;
        for my $key (keys %aur_formats) {
            my ($type, $label) = @{$aur_formats{$key}};

            if ($type eq $opt_dump_fmt or $opt_dump_fmt eq 'any') {
                $formats{$key} = $label;
            }
        }
        for my $key (sort { $formats{$a} cmp $formats{$b} } keys %formats) {
            say join("\t", $key, $aur_formats{$key}->[1]);
        }
        exit(0);
    }

    my @opt_kinds;
    if (length($opt_table_keys)) {
        # XXX: error verification for arguments (e.g. using values %aur_formats)
        @opt_kinds = split(',', $opt_table_keys);
    } else {
        @opt_kinds = ('Depends', 'MakeDepends', 'CheckDepends');
    }

    if (length($opt_mode)) {
        if (not length($opt_delim) and $opt_mode eq 'list' or $opt_mode eq 'table') {
            $opt_delim = "\t";
        } elsif (not length($opt_delim)) {
            $opt_delim = " ";
        }
        my @results;
        my $i = 0;

        # Store results in an array of hashes, stored in memory for (reverse) sorting and
        # set operations (union, intersection)
        while (my $row = <ARGV>) {
            my $results_line = parse_json_line($row, $i++);
            push(@results, $results_line);
        }
        die if $!;

        results_merge(\@results, $opt_union_key, $opt_isect_key);
        results_rsort(\@results, $opt_sort_key, $opt_reverse);
        my $counts = scalar(@results);

        if ($opt_mode eq 'counts') {
            say $counts;
        }
        elsif ($opt_mode eq 'json' and $counts > 0) {
            # Sort keys in alphabetical order
            $aur_json->canonical();

            my %hash = ('resultcount' => $counts, 'results' => \@results,
                        'type' => 'format', 'version' => 1);
            say $aur_json->encode(\%hash);
        }
        elsif ($opt_mode eq 'list') {
            map { info_list($_, $opt_delim) } @results;
        }
        elsif ($opt_mode eq 'table') {
            map { info_table($_, $opt_delim, @opt_kinds) } @results;
        }
        elsif ($opt_mode eq 'format') {
            my ($fmt, $suffix) = tokenize($opt_format);
            die unless (scalar @{$fmt} eq scalar @{$suffix});

            map { info_format($_, $fmt, $suffix, $opt_delim, $opt_verbose) } @results;
        }
    } else {
        say STDERR $argv0 . ": no mode specified";
        exit(1);
    }
}

# vim: set et sw=4 sts=4 ft=perl:
