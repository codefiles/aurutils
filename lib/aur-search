#!/bin/bash
# aur-search - search for AUR packages
[[ -v AUR_DEBUG ]] && set -o xtrace
argv0=search
AUR_LOCATION=${AUR_LOCATION:-'https://aur.archlinux.org'}
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default options
multiple=section search_by=name-desc sort_key=Name type=search mode=query color=auto

usage() {
    printf >&2 'usage: %s [-adimnqrsv] [-k key] pkgname...\n' "$argv0"
    exit 1
}

# shellcheck disable=SC2016
info_long() {
    awk -F '\t' -v URL="$AUR_LOCATION/packages" -v colorize="$1" '
    function fmt(prefix, field) {
        printf("%s%-15s%s %s\n", BOLD, prefix, ALL_OFF, field)
    }

    BEGIN {
        # libmakepkg escape sequences start in \e and cannot be used here
        if (colorize) {
            BOLD    = "\033[1m"
            ALL_OFF = "\033[0m"
        } else {
            BOLD    = ""
            ALL_OFF = ""
        }
    } {
        if (NR > 1) {
            printf("\n")
        }
        printf("%s%-15s%s %s/%s\n", BOLD, "AUR URL:", ALL_OFF, URL, $1)

        fmt("Name:"         , $1)
        fmt("Base:"         , $2)
        fmt("Version:"      , $3)
        fmt("Description:"  , $4)
        fmt("URL:"          , $5)
        fmt("Keywords:"     , $6)
        fmt("Licenses:"     , $7)
        fmt("Maintainer:"   , $8)
        fmt("Votes:"        , $9)
        fmt("Popularity:"   , $10)
        fmt("Out Of Date:"  , $11)
        fmt("Submitted:"    , $12)
        fmt("Last Modified:", $13)
        fmt("Depends On:"   , $14)
        fmt("Makedepends:"  , $15)
        fmt("Checkdepends:" , $16)
        fmt("Optdepends:", $17)
    }
    END {
        if (NR == 0)
            exit(1)
    }'
}

# shellcheck disable=SC2016
info_short() {
    env -u LC_ALL LC_NUMERIC=C awk -F '\t' -v AUR_URL="$AUR_LOCATION/packages" -v colorize="$1" '
    BEGIN {
        # libmakepkg escape sequences start in \e and cannot be used here
        if (colorize) {
            BOLD    = "\033[1m"
            ALL_OFF = "\033[0m"
            RED     = BOLD "\033[31m"
            GREEN   = BOLD "\033[32m"
            YELLOW  = BOLD "\033[33m"
            BLUE    = BOLD "\033[34m"
            OSC8    = "\033]8"
            ST      = "\033\\"
        } else {
            BOLD=""; ALL_OFF=""; RED=""; GREEN=""; YELLOW=""; BLUE=""; OSC8=""; ST=""
        }
    } {
        # Name Version Description Maintainer NumVotes Popularity OutOfDate
        name = $1; ver = $2; desc = $3; mnt = $4; votes = $5; pop = $6; ood = $7

        ood == "-" ?
            ood = "" :
            ood = strftime("(Out-of-date: %d %B %Y)", ood)

        mnt == "-" ?
            mnt = "(Orphaned) " :
            mnt = ""

        pop = sprintf("%.2f", $6)
        pre = sprintf("%saur/%s%s%s", BLUE, ALL_OFF, BOLD, name)

        if (length(OSC8) && length(ST)) {
            pre = sprintf("%s;;%s%s%s%s;;%s", OSC8, AUR_URL "/" name, ST, pre, OSC8, ST)
        }
        printf("%s %s%s %s(+%s %s%%) %s%s%s%s\n", pre, GREEN, ver, ALL_OFF, votes, pop, mnt, RED, ood, ALL_OFF)
        printf("    %s\n", desc)
    }
    END {
        if (NR == 0)
            exit(1)
    }'
}

# noop formatter which returns 1 if no lines were processed
info_noop() {
    awk '{ print } END { if (NR == 0) exit(1); }'
}

source /usr/share/makepkg/util/parseopts.sh

opt_short='f:k:adimnqrsv'
opt_long=('any' 'info' 'search' 'desc' 'maintainer' 'name' 'depends' 'verbose' 'color:' 'table'
          'makedepends' 'optdepends' 'checkdepends' 'key:' 'json' 'short' 'format:')
opt_hidden=('dump-options' 'raw' 'format-stdin')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset format format_str format_args query_args
while true; do
    case "$1" in
        -a|--any)
            multiple=union ;;
        -i|--info)
            type=info ;;
        -s|--search)
            type=search ;;
        -d|--desc)
            search_by=name-desc ;;
        -m|--maintainer)
            search_by=maintainer ;;
        -n|--name)
            search_by=name ;;
        --depends)
            search_by=depends ;;
        --makedepends)
            search_by=makedepends ;;
        --optdepends)
            search_by=optdepends ;;
        --checkdepends)
            search_by=checkdepends ;;
        --color)
            shift; color=$1 ;;
        -q|--short)
            format=short ;;
        -v|--verbose)
            format=long ;;
        --table)
            format=table ;;
        -f|--format)
            shift; format_str=$1
            format=custom ;;
        --format-stdin)
            mode=stdin ;; # experimental
        -r|--raw|--json)
            format=json ;;
        -k|--key)
            shift; sort_key=$1 ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}" ${AUR_DEBUG+"${opt_hidden[@]}"}
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

# Colored messages on both stdout and stderr may be desired if stdout is not
# connected to a terminal, e.g. when piping to less -R. (#585) When printing to
# a file, they should be disabled instead. Default to `--color=auto` but allow
# specifying other modes.
colorize=0
if [[ ! -v NO_COLOR ]] && [[ ! -v AUR_DEBUG ]]; then
    if [[ $color == 'auto' ]]; then
        [[ -t 1 ]] && colorize=1

    elif [[ $color == 'always' ]]; then
        colorize=1

    elif [[ $color != 'none' ]]; then
        printf >&2 '%s: invalid --color mode\n' "$argv0"
        exit 1
    fi
fi

if ! (( $# )) && ! [[ $mode == "stdin" ]]; then
    usage
fi

# set format depending on query type (#319)
case $type in
      info) format=${format-long}  ;;
    search) format=${format-short} ;;
esac

# intersection of results (#313)
# XXX: set intersection key from `search_by` value
case $multiple in
    section) format_args+=(--isect 'Name') ;;
      union) format_args+=(--union 'Name') ;;
esac

# sort results by key
format_args+=(-k "$sort_key")

# output filters
case $format in
    short) 
        format_args+=(-f '%n\t%v\t%d\t%m\t%w\t%p\t%o\n')
        info() { info_short "$colorize"; } ;;
    long) 
        format_args+=(-f '%n\t%b\t%v\t%d\t%U\t%K\t%e\t%m\t%w\t%p\t%o\t%S\t%L\t%D\t%M\t%c\t%O\t%C\t%P\n')
        info() { info_long  "$colorize"; } ;;
    custom)
        format_args+=(-f "$format_str")
        info() { info_noop; } ;;
    table)
        format_args+=(--table)
        info() { info_noop; } ;;
    json)
        format_args+=(--json)
        info() { info_noop; } ;;
esac

if [[ $mode == 'query' ]]; then
    aur query -t "$type" -b "$search_by" "$@" | aur format "${format_args[@]}" -v | info
    pstate=("${PIPESTATUS[@]}")

    if (( pstate[0] )) || (( pstate[1] )); then
        exit 2 # aur-query or aurweb response error

    elif (( pstate[2] )); then
        exit 1 # no results found
    fi

elif [[ $mode == 'stdin' ]]; then
    info
fi

# vim: set et sw=4 sts=4 ft=sh:
