#!/bin/bash
# aur-search - search for AUR packages
[[ -v AUR_DEBUG ]] && set -o xtrace
argv0=search
AUR_LOCATION=${AUR_LOCATION:-'https://aur.archlinux.org'}
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default options
multiple=section search_by=name-desc sort_key=Name type=search mode=query color=auto

usage() {
    plain >&2 'usage: %s [-adimnqrsv] [-k key] pkgname...' "$argv0"
    exit 1
}

hyperlink() {
    local uri=$1 mesg=$2

    # Interpret escapes with %b for "dumb" terminals (#1001)
    printf "\e]8;;%s\e\\%b\e]8;;\e\\" "$uri" "$mesg"
}

info_long() {
    local desc=('Name'  'Base' 'Version' 'Description' 'URL' 'Keywords' 'License' 'Maintainer'
                'Votes' 'Popularity' 'Out Of Date' 'Submitted' 'Last Modified' 'Depends On'
                'Makedepends' 'Checkdepends' 'Optdepends' 'Conflicts' 'Provides')
    local count=0 info

    { while IFS=$'\t' read -r -a info; do
          if (( count++ )); then
              printf '\n'
          fi
          printf "$BOLD%s:$ALL_OFF\\t%s\\n" "AUR URL" "$AUR_LOCATION/packages/${info[0]}"

          for i in "${!info[@]}"; do
              printf "$BOLD%s:$ALL_OFF\\t%s\\n" "${desc[i]}" "${info[i]}"
          done
      done

      if (( count == 0 )); then
          return 1
      fi
    } | column -Lt -s $'\t'

    # Trickery to preserve $count check from while ... read subshell
    # XXX: disregards column(1) exit status
    return "${PIPESTATUS[0]}"
}

info_short() {
    local Name Version NumVotes Popularity Maintainer OutOfDate Description Url Link
    local count=0

    while IFS=$'\t' read -r Name Version Description Maintainer NumVotes Popularity OutOfDate; do
        (( count++ ))

        case $OutOfDate in
            -) unset OutOfDate ;;
            *) printf -v OutOfDate '(Out-of-date: %(%d %B %Y)T)' "$OutOfDate"
        esac

        case $Maintainer in
            -) Maintainer='(Orphaned) ' ;;
            *) unset Maintainer ;;
        esac

        # Unset LC_ALL to ensure it doesn't override LC_NUMERIC.
        LC_ALL='' LC_NUMERIC=C printf -v Popularity '%.2f' "$Popularity"

        Url=${AUR_LOCATION}/packages/${Name}
        Link="$(hyperlink "$Url" "${BLUE}aur/${ALL_OFF}${BOLD}${Name}")"

        printf "%s ${GREEN}%s ${ALL_OFF}(+%s %s%%) ${RED}%s%s${ALL_OFF}\\n    %s\\n" \
               "$Link" "$Version" "$NumVotes" "$Popularity" "$Maintainer" "$OutOfDate" "$Description"
    done

    if (( count == 0 )); then
        return 1
    fi
}

# noop formatter which returns 1 if no lines were processed
info_noop() {
    awk '{ print } END { if (NR == 0) exit(1); }'
}

source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

opt_short='f:k:adimnqrsv'
opt_long=('any' 'info' 'search' 'desc' 'maintainer' 'name' 'depends' 'verbose' 'color:' 'table'
          'makedepends' 'optdepends' 'checkdepends' 'key:' 'json' 'short' 'format:')
opt_hidden=('dump-options' 'raw' 'format-stdin')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset format format_str format_args query_args
while true; do
    case "$1" in
        -a|--any)
            multiple=union ;;
        -i|--info)
            type=info ;;
        -s|--search)
            type=search ;;
        -d|--desc)
            search_by=name-desc ;;
        -m|--maintainer)
            search_by=maintainer ;;
        -n|--name)
            search_by=name ;;
        --depends)
            search_by=depends ;;
        --makedepends)
            search_by=makedepends ;;
        --optdepends)
            search_by=optdepends ;;
        --checkdepends)
            search_by=checkdepends ;;
        --color)
            shift; color=$1 ;;
        -q|--short)
            format=short ;;
        -v|--verbose)
            format=long ;;
        --table)
            format=table ;;
        -f|--format)
            shift; format_str=$1
            format=custom ;;
        --format-stdin)
            mode=stdin ;; # experimental
        -r|--raw|--json)
            format=json ;;
        -k|--key)
            shift; sort_key=$1 ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}" ${AUR_DEBUG+"${opt_hidden[@]}"}
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

# Colored messages on both stdout and stderr may be desired if stdout is not
# connected to a terminal, e.g. when piping to less -R. (#585) When printing to
# a file, they should be disabled instead. Default to `--color=auto` but allow
# specifying other modes.
if [[ ! -v NO_COLOR ]] && [[ ! -v AUR_DEBUG ]]; then
    if [[ $color == 'auto' ]]; then
        [[ -t 1 ]] && colorize

    elif [[ $color == 'always' ]]; then
        colorize

    elif [[ $color != 'none' ]]; then
        printf >&2 '%s: invalid --color mode\n' "$argv0"
        exit 1
    fi
fi

if ! (( $# )) && ! [[ $mode == "stdin" ]]; then
    usage
fi

# set format depending on query type (#319)
case $type in
      info) format=${format-long}  ;;
    search) format=${format-short} ;;
esac

# intersection of results (#313)
# XXX: set intersection key from `search_by` value
case $multiple in
    section) format_args+=(--isect 'Name') ;;
      union) format_args+=(--union 'Name') ;;
esac

# sort results by key
format_args+=(-k "$sort_key")

# output filters
case $format in
    short) 
        format_args+=(-f '%n\t%v\t%d\t%m\t%w\t%p\t%o\n')
        info() { info_short; } ;;
    long) 
        format_args+=(-f '%n\t%b\t%v\t%d\t%U\t%K\t%e\t%m\t%w\t%p\t%o\t%S\t%L\t%D\t%M\t%c\t%O\t%C\t%P\n')
        info() { info_long; } ;;
    custom)
        format_args+=(-f "$format_str")
        info() { info_noop; } ;;
    table)
        format_args+=(--table)
        info() { info_noop; } ;;
    json)
        format_args+=(--json)
        info() { info_noop; } ;;
esac

# input filters
case $mode in
    query)
        gen() { aur query -t "$type" -b "$search_by" "$@"; } ;;
    stdin)
        gen() { tee; } ;;
esac

# pipeline
gen "$@" | aur format "${format_args[@]}" -v | info
pstate=("${PIPESTATUS[@]}")

if (( pstate[0] )) || (( pstate[1] )); then
    exit 2 # aur-query or aurweb response error

elif (( pstate[2] )); then
    exit 1 # no results found
fi
exit 0

# vim: set et sw=4 sts=4 ft=sh:
